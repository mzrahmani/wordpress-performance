metrics:
    wordpress.installed:
        label: "Is WordPress installed?"
        matching_calls:
            php:
                - callee: "=WP::main"

    wordpress.get_option:
        label: "WordPress get_option"
        matching_calls:
            php:
                - callee:
                    selector: '=get_option'
                    argument:
                        1: '*'

    wordpress.get_option.raw:
        label: "WordPress get_option RAW (SQL query based)"
        matching_calls:
            php:
                - callee:
                      selector: '=wpdb::query'
                      argument:
                          1: '/.+ from wp_options/'
                  contrib: "count-only"

    wordpress.plugins_count:
        label: "Count active plugins based on plugin_loaded hook"
        matching_calls:
            php:
                - callee:
                      selector: "=do_action"
                      argument:
                          1: "=plugin_loaded"
                          2: "*"

    wordpress.postdata_count:
        label: "Count number of times setup_postdata is used"
        matching_calls:
            php:
                - callee:
                      selector: "=WP_Query::setup_postdata"

    wordpress.wp_query:
        label: "WordPress wp_query"
        timeline: true
        matching_calls:
            php:
                - callee:
                    selector: '=WP_Query::query'
                    argument:
                        1: '*'
                        
    wordpress.found_rows:
        label: "WordPress SQL_CALC_FOUND_ROWS"
        matching_calls:
            php:
                - callee:
                    selector: '=wpdb::query'
                    argument:
                        1: '/.+ SQL_CALC_FOUND_ROWS/'
                  contrib: "count-only"

tests:
    "The homepage should be fast":
        path: "/"
        assertions:
            - "main.wall_time < 200ms"

    "Number of calls to get_option should be reasonable":
        path: "/.*"
        assertions:
            - "metrics.wordpress.get_option.count <= 50"

    "The number of calls to wp_options table should be reasonable":
        path: "/.*"
        assertions:
            - "metrics.wordpress.get_option.raw.count <= 25"

    "Not too many SQL queries":
        path: "/.*"
        when: "metrics.wordpress.installed.count > 0"
        assertions:
            - "metrics.sql.queries.count <= 100"

    "Regular plugins shouldn't take too long to load":
        path: "/.*"
        when: 'has_marker("wordpress.muplugins_loaded") and has_marker("wordpress.plugins_loaded")'
        assertions:
            # Should not exceed 50ms
            - '(marker_time("wordpress.plugins_loaded") - marker_time("wordpress.muplugins_loaded")) <= 50ms'
            # Should not exceed 10% of the wall_time
            - '(marker_time("wordpress.plugins_loaded") - marker_time("wordpress.muplugins_loaded")) / main.wall_time < 0.1'

    "Don't loop too many posts":
        path: "/.*"
        assertions:
            - "metrics.wordpress.postdata_count.count <= 25"

# Read more about writing scenarios at https://blackfire.io/docs/builds-cookbooks/scenarios
scenarios: |
    #!blackfire-player

    scenario
        name 'The homepage should answer with a 200 status code'

        visit url('/')
            expect status_code() == 200
